---
title: "Quarto-shinylive & Quartolive Testdrive"
author: "Yonghun Suh"
date: "Oct 17, 2024"
categories: [Code]
#image: 
engine: knitr
format: 
  live-html:
    #page-layout: full
    ##https://quarto.org/docs/authoring/article-layout.html
    toc: false
    number_sections: true
    code-copy: true
    code-fold: show
    code-tools: true
    code-overflow: scroll
    code-link: true
    number-sections: true
    toc_depth: 3
    lightbox: true
    theme:
      light: cosmo #sketchy
      dark: [cosmo, ../../misc/theme-dark.scss]
    css: ../../misc/styles.css
＃webr: 
＃  show-startup-message: false
filters:
  #- webr
  - shinylive
  
---

```{r echo=FALSE}
# Setup knitr for handling {webr} and {pyodide} blocks
# TODO: With quarto-dev/quarto-cli#10169, we can implement this in a filter

# We'll handle `include: false` in Lua, always include cell in knitr output
knitr::opts_hooks$set(include = function(options) {
  if (options$engine == "webr" || options$engine == "pyodide" ) {
    options$include <- TRUE
  }
  options
})

# Passthrough engine for webr
knitr::knit_engines$set(webr = function(options) {
  knitr:::one_string(c(
    "```{webr}",
    options$yaml.code,
    options$code,
    "```"
  ))
})

# Passthrough engine for pyodide
knitr::knit_engines$set(pyodide = function(options) {
  knitr:::one_string(c(
    "```{pyodide}",
    options$yaml.code,
    options$code,
    "```"
  ))
})
```





# Quarto-Shinylive

## Locations of Earthquakes off Fiji

> The data set give the locations of 1000 seismic events of MB > 4.0. The events occurred in a cube near Fiji since 1964. There are two clear planes of seismic activity. One is a major plate junction; the other is the Tonga trench off New Zealand. These data constitute a subsample from a larger dataset of containing 5000 observations.

This is one of the Harvard PRIM-H project data sets. They in turn obtained it from Dr. John Woodhouse, Dept. of Geophysics, Harvard University.


:::{.column-screen-inset}



```{r include=FALSE,eval=T}
install.packages("shinylive")
```




```{shinylive-r}
#| standalone: true
#| viewerHeight: 1000


library(shiny)
library(leaflet)
library(RColorBrewer)

ui <- bootstrapPage(
  tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
  leafletOutput("map", width = "100%", height = "100%"),
  absolutePanel(top = 10, right = 10,
    sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
      value = range(quakes$mag), step = 0.1
    ),
    selectInput("colors", "Color Scheme",
      rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
    ),
    checkboxInput("legend", "Show legend", TRUE)
  )
)

server <- function(input, output, session) {

  # Reactive expression for the data subsetted to what the user selected
  filteredData <- reactive({
    quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
  })

  # This reactive expression represents the palette function,
  # which changes as the user makes selections in UI.
  colorpal <- reactive({
    colorNumeric(input$colors, quakes$mag)
  })

  output$map <- renderLeaflet({
    # Use leaflet() here, and only include aspects of the map that
    # won't need to change dynamically (at least, not unless the
    # entire map is being torn down and recreated).
    leaflet(quakes) %>% addTiles() %>%
      fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
  })

  # Incremental changes to the map (in this case, replacing the
  # circles when a new color is chosen) should be performed in
  # an observer. Each independent set of things that can change
  # should be managed in its own observer.
  observe({
    pal <- colorpal()

    leafletProxy("map", data = filteredData()) %>%
      clearShapes() %>%
      addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
        fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag,"진도")
      )
  })

  # Use a separate observer to recreate the legend as needed.
  observe({
    proxy <- leafletProxy("map", data = quakes)

    # Remove any existing legend, and only if the legend is
    # enabled, create a new one.
    proxy %>% clearControls()
    if (input$legend) {
      pal <- colorpal()
      proxy %>% addLegend(position = "bottomright",
        pal = pal, values = ~mag
      )
    }
  })
}

shinyApp(ui, server)

```
Credit: [Using Leaflet with Shiny](https://rstudio.github.io/leaflet/articles/shiny.html#modifying-existing-maps-with-leafletproxy){target="_blank"}

:::

# Quarto-Live


## Interactive R

### Mergesort from scratch

I coded this while teaching myself computer science.


I think it is important to understand how the "so-called" the basis functions work when it comes to the programming.

You can play around with it. Plus, you can modify the code for a better understanding.




```{webr}
### You can play ALL by YOURSELF!


print("Hello quarto-live world!")



{
  # set seed for reproducability
  set.seed(10)
  givne_num <- sample(1:999, 20)
}




# merge two sorted array
merge <- function(a, b) {
  
  # create temp array
  temp <- numeric(length(a) + length(b))
  
  
  # array a, array b, setting the init value of temp array index i 
  a_i <- 1
  b_i <- 1
  temp_i <- 1
  
  
  # loop through till the index temp_i reaches length of the temp array
  for(temp_i in 1 : length(temp)) {
    
    # if
    # the index of `a` does not exceedes the length of `a`(a present)
    # a[a_i] < b[b_i]  or,
    
      
    # the index of `b` does exceedes the length of `b`(i.e., b does not presnt)
    if((a_i <= length(a) &&
        a[a_i] < b[b_i]) ||
       b_i > length(b)) {
      
      
      # assign an element of `a[a_i]` into temp[a_i], then i++ the index of `a`
      temp[temp_i] <- a[a_i]
      a_i <- a_i + 1
    }
    
    # else
    else {
      

      # assign b[b_i] into temp[temp_i] then i++ the index
      temp[temp_i] <- b[b_i]
      b_i <- b_i + 1      
    }
    
  }
  
  # return the sorted array (part of the divided/splitted)
  return(temp)
}




# merge sort algorithm(splitting included) - recursive function
mergesort <- function(arr) {
  

  # if length of the given array exceeds 1 then
  if(length(arr) > 1) {
    
    # 분할할 중간 지점
    # midpoint for the split
    # e.g., an array size of 5: celing(5/2) = 3
    half <- ceiling(length(arr)/2)
    
    
    # calling recursive function: split untill the single element then sort
    # 1 to midpoint
    a <- mergesort(arr[1:half])
    
    
    # midpoint+1 to last
    b <- mergesort(arr[(half+1):length(arr)])
    
    # merge two sorted array and return
    merge(a, b)
  }
  
  # if the size of the array is 1
  else {
    # just return
    return(arr)
  }
}




minmax <- function(arr){
  
  temp <- mergesort(arr)
  
  # mimicing Python's dictionary... then return
  return(list("max" = temp[length(temp)], "min" = temp[1]))
  
}

# function call
output <- minmax(givne_num)



# max
output$max

# min
output$min



# Use the R built-in function to check the answer
max(givne_num)
min(givne_num)






















###
```



## Non-interactive



```{r}
cat("And, this is a non-interactive cell", fill = TRUE)

```

