{
  "hash": "12283383db88549e7051dc145b28759d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto-shinylive test\"\nauthor: \"Yonghun Suh\"\ndate: \"Oct 17, 2024\"\ncategories: [Code]\n#image: \nengine: knitr\nformat: \n  live-html:\n    #page-layout: full\n    ##https://quarto.org/docs/authoring/article-layout.html\n    toc: false\n    number_sections: true\n    code-copy: true\n    code-fold: show\n    code-tools: true\n    code-overflow: scroll\n    code-link: true\n    number-sections: true\n    toc_depth: 3\n    lightbox: true\n    theme:\n      light: cosmo #sketchy\n      dark: [cosmo, ../../misc/theme-dark.scss]\n    css: ../../misc/styles.css\n＃webr: \n＃  show-startup-message: false\nfilters:\n  #- webr\n  - shinylive\n  \n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## quarto-shinylive\n\n\n:::{.column-screen-inset}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 1000\n\n\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\nui <- bootstrapPage(\n  tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n  leafletOutput(\"map\", width = \"100%\", height = \"100%\"),\n  absolutePanel(top = 10, right = 10,\n    sliderInput(\"range\", \"Magnitudes\", min(quakes$mag), max(quakes$mag),\n      value = range(quakes$mag), step = 0.1\n    ),\n    selectInput(\"colors\", \"Color Scheme\",\n      rownames(subset(brewer.pal.info, category %in% c(\"seq\", \"div\")))\n    ),\n    checkboxInput(\"legend\", \"Show legend\", TRUE)\n  )\n)\n\nserver <- function(input, output, session) {\n\n  # Reactive expression for the data subsetted to what the user selected\n  filteredData <- reactive({\n    quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]\n  })\n\n  # This reactive expression represents the palette function,\n  # which changes as the user makes selections in UI.\n  colorpal <- reactive({\n    colorNumeric(input$colors, quakes$mag)\n  })\n\n  output$map <- renderLeaflet({\n    # Use leaflet() here, and only include aspects of the map that\n    # won't need to change dynamically (at least, not unless the\n    # entire map is being torn down and recreated).\n    leaflet(quakes) %>% addTiles() %>%\n      fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))\n  })\n\n  # Incremental changes to the map (in this case, replacing the\n  # circles when a new color is chosen) should be performed in\n  # an observer. Each independent set of things that can change\n  # should be managed in its own observer.\n  observe({\n    pal <- colorpal()\n\n    leafletProxy(\"map\", data = filteredData()) %>%\n      clearShapes() %>%\n      addCircles(radius = ~10^mag/10, weight = 1, color = \"#777777\",\n        fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag,\"진도\")\n      )\n  })\n\n  # Use a separate observer to recreate the legend as needed.\n  observe({\n    proxy <- leafletProxy(\"map\", data = quakes)\n\n    # Remove any existing legend, and only if the legend is\n    # enabled, create a new one.\n    proxy %>% clearControls()\n    if (input$legend) {\n      pal <- colorpal()\n      proxy %>% addLegend(position = \"bottomright\",\n        pal = pal, values = ~mag\n      )\n    }\n  })\n}\n\nshinyApp(ui, server)\n\n```\n\n:::\n\n## quarto-live\n\n\n### Interactive\n\n\n\n::: {.cell}\n```{webr}\n### You can play ALL by YOURSELF!\n\n\nprint(\"Hello {quarto-webr} world!\")\n\n\n\n\n\n###\n```\n:::\n\n\n\n### Non-interactive\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"And, this is a non-interactive cell\", fill = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnd, this is a non-interactive cell\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}