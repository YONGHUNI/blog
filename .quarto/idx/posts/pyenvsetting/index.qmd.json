{"title":"Python Dependency Test","markdown":{"yaml":{"title":"Python Dependency Test","subtitle":"Test Case of Handling a Binary Data with Python","author":"Yonghun Suh","date":"Oct 9, 2024","categories":["Code"],"image":"https://db0dce98.rocketcdn.me/en/files/2020/04/Diapositive1-1.png","format":{"html":{"toc":true,"number_sections":true,"code-copy":true,"code-fold":"show","code-tools":true,"code-overflow":"scroll","code-link":true,"number-sections":true,"toc_depth":3,"lightbox":true}}},"headingText":"Intro - Backdrop","containsRefs":false,"markdown":"\n\n\nThis example demonstrates how Quarto documents can be rendered in GitHub-Actions **CI/CD** environment with the required Python/R package dependencies. This need pre-setup - see: [my `.github/workflows`](https://github.com/YONGHUNI/blog/tree/main/.github/workflows){target=\"_blank\"} and [GitHub Actions](https://github.com/features/actions){target=\"_blank\"} for more details.\n\nThe code below is part of what I used for my Master's thesis. In my thesis, I used the binary data provided from Korea Meteorological Agency(KMA) which contains radar reflectance of precipitation. Using the code below, I derived the rainfall intensity and the amount of antecedent rainfall and plugged them into my machine learning models.\n\n\n# Setup Reticulate\n\n\nI am kinda `R` person and not a big fan of python(because of the indentation... You know... hard to do `for` loops and `if` statements), but I had no choice but use `Python` because I needed the greatest package of all time, *i.e.*, `NumPy` for handling multidimensional array. Also, the handling of binary data sucks in R made me to use it.\n\n\n```{r}\nlibrary(reticulate)\n\n\n\nif (Sys.info()[[1]]==\"Windows\") {\n        \n    # For my Windows Environment\n    use_condaenv(\"C:\\\\Users\\\\dydgn\\\\anaconda3\\\\envs\\\\baseline\\\\python.exe\", required = TRUE)    \n    \n    } else{\n    \n    # For github actions to utilize CI/CD\n    use_condaenv(\"/home/runner/micromamba/envs/baseline/bin/python\", required = TRUE)   \n    \n}\n\n\n```\n\n\n# The First step with Python\n\n## Import Some Packages\n\n```{python}\n\nimport sys\nprint(sys.executable)\n\n```\n\nThis will show where the python executable binary is.\n\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport struct\nimport gzip\n```\n\nImporting basic packages\n\n\n## Handling Various File Formats\n\n### Get the Size of a Compressed Gunzip, **i.e.,** Raw File\n\n```{python}\n\nfile = \"./data/RDR_HSR_22_20220808/RDR_CMP_HSR_PUB_202208082200.bin.gz\"\n\n\n\n# # Get the size of the binary data file in bytes\nfile_size = os.path.getsize(file)\n\nprint(\"The compressed data file size is {} bytes.\".format(file_size))\n\n```\n\n### Get the Size of a Binary file\n\n```{python}\n\ndef getuncompressedsize(filename):\n    with open(filename, 'rb') as f:\n        f.seek(-4, 2)\n        return struct.unpack('I', f.read(4))[0]\n\nfile_size = getuncompressedsize(file)\n\nprint(\"The binary data file size is {} bytes.\".format(file_size))\n\n```\n\n\n## Hmm.. Do you know how to cook a binary file?\n\nI had to read the manual provided to convert a binary file into so-called `raster`\n\n```{r, echo=FALSE, out.width=\"100%\", out.height=600, fig.align = \"center\"}\n\nknitr::include_graphics(\"./data/manual/레이더 합성자료 포맷 정의서_외부제공용.pdf\")\n\n```\n\n### Read a binary as a numpy array\n\n```{python}\n\nheader_size = 1024\n\n\n# Check if the file size is non-zero\nif file_size == 0:\n    print(\"The binary data file is empty.\")\nelse:\n  f = gzip.GzipFile(file)\n  f.seek(header_size)\n  file_content = f.read()\n  data = np.frombuffer(file_content, dtype=np.short)\n  f.close()\n\n\n```\n\n### Reshape the array using the number from the official manual\n\n```{python}\n# Reshape the data into a 2D array\ndata = data.reshape(2881, 2305)\n# data needs to be flipped!\ndata = np.flipud(data)\n\ndata.shape\n```\n### Initial plotting\n\n```{python}\n#### Plotting\n\ndef matplot(x):\n  \n  plt.clf()\n  plt.imshow(x)\n  plt.colorbar()\n  plt.show()\n\n\nmatplot(data)\n```\n\n\n### Munging data\n\nTo use as a feature of the model, I had to change the radar reflectance into the amount of rainfall intensity by using [Z-R relationship](https://www.scirp.org/journal/paperinformation?paperid=71153){target=\"_blank\"}.\n\n```{python}\n\n# Scale factor\n\n#define PUB_OUT   -30000 // Outside of the observed region\n\n#define PUB_IN    -25000 // Unobserved areas within the observed region\n\n#define PUB_MIN   -20000 // Minimum value for representation within the observed area\n\n\ndata = np.where(data<-20000, 0, data)\n\necho = data*0.01\n\n\n\n\n# Z-R Relation\n\nZRa = 148.\n\nZRb = 1.59\n\n# converting dBZ to rain\n\ndef dbz2rain(x):\n\n    rain = (x*0.1 - np.log10(ZRa))/ZRb\n\n    rain = 10**rain\n\n    return rain\n\n\nR = dbz2rain(echo)\n\nR[R<=0.04315743] = 0.0\n\n\n```\n\n\nAfter the conversion, then we get the actual amount of rainfall intensity in `mm/hr`.\n\n```{python}\n# Unit: millimeter per hour\n\nmatplot(R)\n\n```\n\n# Back to the R environment!\n\n## Plot using raster::plot()\n\n```{r}\n#handy R-python interface: reticulate\n\npcp <- py$R\n\nlibrary(raster)\n\n\ntest <- raster(pcp,\n       xmn=(-1121*500),\n       xmx=((2305-1121)*500),\n       ymn=(-1681*500),\n       ymx=(2881-1681)*500,\n       crs = CRS(\"+proj=lcc +lat_1=30 +lat_2=60 +lat_0=38 +lon_0=126 +a=6378138.00 +b=6356752.314 +units=m +no_defs\")\n       )\n\n\nplot(test)\n\n```\n## Plot using tmap package\n\n```{r}\nlibrary(tmap)\nlibrary(leafem)\n\ntmap_mode(\"view\")\n\ntest[test==0]=NA\n\n{\n  tm_basemap(c(\"OpenStreetMap.HOT\",\n               \"https://mt1.google.com/vt/lyrs=y&hl=en&z={z}&x={x}&y={y}\",\n               \"https://mt1.google.com/vt/lyrs=s&hl=en&z={z}&x={x}&y={y}\"),\n             group = list(c(\"OpenStreetMap.HOT\",\n                       \"Google Satellite Imagery w/ label\",\n                       \"Google Satellite Imagery wo/ label\"))) +\n    tm_shape(test)  +                                  \n    tm_raster(title = \"Max Rainfall Intensity[mm/hr]\",\n              palette = \"-Spectral\",\n              style = \"cont\") -> themap\n  \n  \n  \n  tmap_leaflet(themap)|>\n    addMouseCoordinates()\n  \n}\n\n\n```\n\n### Extra: Compairing with the plot from Korea Meteorological Agency\n\n![](data/RDR_CMI_202208082200.png)\n\n","srcMarkdownNoYaml":"\n\n# Intro - Backdrop\n\nThis example demonstrates how Quarto documents can be rendered in GitHub-Actions **CI/CD** environment with the required Python/R package dependencies. This need pre-setup - see: [my `.github/workflows`](https://github.com/YONGHUNI/blog/tree/main/.github/workflows){target=\"_blank\"} and [GitHub Actions](https://github.com/features/actions){target=\"_blank\"} for more details.\n\nThe code below is part of what I used for my Master's thesis. In my thesis, I used the binary data provided from Korea Meteorological Agency(KMA) which contains radar reflectance of precipitation. Using the code below, I derived the rainfall intensity and the amount of antecedent rainfall and plugged them into my machine learning models.\n\n\n# Setup Reticulate\n\n\nI am kinda `R` person and not a big fan of python(because of the indentation... You know... hard to do `for` loops and `if` statements), but I had no choice but use `Python` because I needed the greatest package of all time, *i.e.*, `NumPy` for handling multidimensional array. Also, the handling of binary data sucks in R made me to use it.\n\n\n```{r}\nlibrary(reticulate)\n\n\n\nif (Sys.info()[[1]]==\"Windows\") {\n        \n    # For my Windows Environment\n    use_condaenv(\"C:\\\\Users\\\\dydgn\\\\anaconda3\\\\envs\\\\baseline\\\\python.exe\", required = TRUE)    \n    \n    } else{\n    \n    # For github actions to utilize CI/CD\n    use_condaenv(\"/home/runner/micromamba/envs/baseline/bin/python\", required = TRUE)   \n    \n}\n\n\n```\n\n\n# The First step with Python\n\n## Import Some Packages\n\n```{python}\n\nimport sys\nprint(sys.executable)\n\n```\n\nThis will show where the python executable binary is.\n\n\n```{python}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport struct\nimport gzip\n```\n\nImporting basic packages\n\n\n## Handling Various File Formats\n\n### Get the Size of a Compressed Gunzip, **i.e.,** Raw File\n\n```{python}\n\nfile = \"./data/RDR_HSR_22_20220808/RDR_CMP_HSR_PUB_202208082200.bin.gz\"\n\n\n\n# # Get the size of the binary data file in bytes\nfile_size = os.path.getsize(file)\n\nprint(\"The compressed data file size is {} bytes.\".format(file_size))\n\n```\n\n### Get the Size of a Binary file\n\n```{python}\n\ndef getuncompressedsize(filename):\n    with open(filename, 'rb') as f:\n        f.seek(-4, 2)\n        return struct.unpack('I', f.read(4))[0]\n\nfile_size = getuncompressedsize(file)\n\nprint(\"The binary data file size is {} bytes.\".format(file_size))\n\n```\n\n\n## Hmm.. Do you know how to cook a binary file?\n\nI had to read the manual provided to convert a binary file into so-called `raster`\n\n```{r, echo=FALSE, out.width=\"100%\", out.height=600, fig.align = \"center\"}\n\nknitr::include_graphics(\"./data/manual/레이더 합성자료 포맷 정의서_외부제공용.pdf\")\n\n```\n\n### Read a binary as a numpy array\n\n```{python}\n\nheader_size = 1024\n\n\n# Check if the file size is non-zero\nif file_size == 0:\n    print(\"The binary data file is empty.\")\nelse:\n  f = gzip.GzipFile(file)\n  f.seek(header_size)\n  file_content = f.read()\n  data = np.frombuffer(file_content, dtype=np.short)\n  f.close()\n\n\n```\n\n### Reshape the array using the number from the official manual\n\n```{python}\n# Reshape the data into a 2D array\ndata = data.reshape(2881, 2305)\n# data needs to be flipped!\ndata = np.flipud(data)\n\ndata.shape\n```\n### Initial plotting\n\n```{python}\n#### Plotting\n\ndef matplot(x):\n  \n  plt.clf()\n  plt.imshow(x)\n  plt.colorbar()\n  plt.show()\n\n\nmatplot(data)\n```\n\n\n### Munging data\n\nTo use as a feature of the model, I had to change the radar reflectance into the amount of rainfall intensity by using [Z-R relationship](https://www.scirp.org/journal/paperinformation?paperid=71153){target=\"_blank\"}.\n\n```{python}\n\n# Scale factor\n\n#define PUB_OUT   -30000 // Outside of the observed region\n\n#define PUB_IN    -25000 // Unobserved areas within the observed region\n\n#define PUB_MIN   -20000 // Minimum value for representation within the observed area\n\n\ndata = np.where(data<-20000, 0, data)\n\necho = data*0.01\n\n\n\n\n# Z-R Relation\n\nZRa = 148.\n\nZRb = 1.59\n\n# converting dBZ to rain\n\ndef dbz2rain(x):\n\n    rain = (x*0.1 - np.log10(ZRa))/ZRb\n\n    rain = 10**rain\n\n    return rain\n\n\nR = dbz2rain(echo)\n\nR[R<=0.04315743] = 0.0\n\n\n```\n\n\nAfter the conversion, then we get the actual amount of rainfall intensity in `mm/hr`.\n\n```{python}\n# Unit: millimeter per hour\n\nmatplot(R)\n\n```\n\n# Back to the R environment!\n\n## Plot using raster::plot()\n\n```{r}\n#handy R-python interface: reticulate\n\npcp <- py$R\n\nlibrary(raster)\n\n\ntest <- raster(pcp,\n       xmn=(-1121*500),\n       xmx=((2305-1121)*500),\n       ymn=(-1681*500),\n       ymx=(2881-1681)*500,\n       crs = CRS(\"+proj=lcc +lat_1=30 +lat_2=60 +lat_0=38 +lon_0=126 +a=6378138.00 +b=6356752.314 +units=m +no_defs\")\n       )\n\n\nplot(test)\n\n```\n## Plot using tmap package\n\n```{r}\nlibrary(tmap)\nlibrary(leafem)\n\ntmap_mode(\"view\")\n\ntest[test==0]=NA\n\n{\n  tm_basemap(c(\"OpenStreetMap.HOT\",\n               \"https://mt1.google.com/vt/lyrs=y&hl=en&z={z}&x={x}&y={y}\",\n               \"https://mt1.google.com/vt/lyrs=s&hl=en&z={z}&x={x}&y={y}\"),\n             group = list(c(\"OpenStreetMap.HOT\",\n                       \"Google Satellite Imagery w/ label\",\n                       \"Google Satellite Imagery wo/ label\"))) +\n    tm_shape(test)  +                                  \n    tm_raster(title = \"Max Rainfall Intensity[mm/hr]\",\n              palette = \"-Spectral\",\n              style = \"cont\") -> themap\n  \n  \n  \n  tmap_leaflet(themap)|>\n    addMouseCoordinates()\n  \n}\n\n\n```\n\n### Extra: Compairing with the plot from Korea Meteorological Agency\n\n![](data/RDR_CMI_202208082200.png)\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../misc/quarto-version.lua"],"css":["../../misc/styles.css"],"include-in-header":["../../misc/giscus-mode-toggle.html"],"include-after-body":["../../misc/div-giscus.html"],"toc":true,"number-sections":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"light":"cosmo","dark":["cosmo","../../misc/theme-dark.scss"]},"title-block-banner":true,"title":"Python Dependency Test","subtitle":"Test Case of Handling a Binary Data with Python","author":"Yonghun Suh","date":"Oct 9, 2024","categories":["Code"],"image":"https://db0dce98.rocketcdn.me/en/files/2020/04/Diapositive1-1.png","number_sections":true,"code-copy":true,"toc_depth":3,"lightbox":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}