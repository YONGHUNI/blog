{"title":"Quarto-shinylive & Quartolive Testdrive","markdown":{"yaml":{"title":"Quarto-shinylive & Quartolive Testdrive","author":"Yonghun Suh","date":"Oct 17, 2024","categories":["Code"],"image":"https://hypebright.nl/wp-content/uploads/2023/09/shinylive-blog-2-930x620.png","format":{"live-html":{"toc":false,"number_sections":true,"code-copy":true,"code-fold":"show","code-tools":true,"code-overflow":"scroll","code-link":true,"number-sections":true,"toc_depth":3,"lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","../../misc/theme-dark.scss"]},"css":"../../misc/styles.css"}},"＃webr":null,"＃  show-startup-message":false,"filters":["shinylive"]},"headingText":"Quarto-Shinylive","containsRefs":false,"markdown":"\n{{< include ../../_extensions/r-wasm/live/_knitr.qmd >}}\n\n\n\n## Locations of Earthquakes off Fiji\n\n> The data set give the locations of 1000 seismic events of MB > 4.0. The events occurred in a cube near Fiji since 1964. There are two clear planes of seismic activity. One is a major plate junction; the other is the Tonga trench off New Zealand. These data constitute a subsample from a larger dataset of containing 5000 observations.\n\nThis is one of the Harvard PRIM-H project data sets. They in turn obtained it from Dr. John Woodhouse, Dept. of Geophysics, Harvard University.\n\n\n:::{.column-screen-inset}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 1000\n\n\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\nui <- bootstrapPage(\n  tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n  leafletOutput(\"map\", width = \"100%\", height = \"100%\"),\n  absolutePanel(top = 10, right = 10,\n    sliderInput(\"range\", \"Magnitudes\", min(quakes$mag), max(quakes$mag),\n      value = range(quakes$mag), step = 0.1\n    ),\n    selectInput(\"colors\", \"Color Scheme\",\n      rownames(subset(brewer.pal.info, category %in% c(\"seq\", \"div\")))\n    ),\n    checkboxInput(\"legend\", \"Show legend\", TRUE)\n  )\n)\n\nserver <- function(input, output, session) {\n\n  # Reactive expression for the data subsetted to what the user selected\n  filteredData <- reactive({\n    quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]\n  })\n\n  # This reactive expression represents the palette function,\n  # which changes as the user makes selections in UI.\n  colorpal <- reactive({\n    colorNumeric(input$colors, quakes$mag)\n  })\n\n  output$map <- renderLeaflet({\n    # Use leaflet() here, and only include aspects of the map that\n    # won't need to change dynamically (at least, not unless the\n    # entire map is being torn down and recreated).\n    leaflet(quakes) %>% addTiles() %>%\n      fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))\n  })\n\n  # Incremental changes to the map (in this case, replacing the\n  # circles when a new color is chosen) should be performed in\n  # an observer. Each independent set of things that can change\n  # should be managed in its own observer.\n  observe({\n    pal <- colorpal()\n\n    leafletProxy(\"map\", data = filteredData()) %>%\n      clearShapes() %>%\n      addCircles(radius = ~10^mag/10, weight = 1, color = \"#777777\",\n        fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag,\"진도\")\n      )\n  })\n\n  # Use a separate observer to recreate the legend as needed.\n  observe({\n    proxy <- leafletProxy(\"map\", data = quakes)\n\n    # Remove any existing legend, and only if the legend is\n    # enabled, create a new one.\n    proxy %>% clearControls()\n    if (input$legend) {\n      pal <- colorpal()\n      proxy %>% addLegend(position = \"bottomright\",\n        pal = pal, values = ~mag\n      )\n    }\n  })\n}\n\nshinyApp(ui, server)\n\n```\nCredit: [Using Leaflet with Shiny](https://rstudio.github.io/leaflet/articles/shiny.html#modifying-existing-maps-with-leafletproxy){target=\"_blank\"}\n\n:::\n\n# Quarto-Live\n\n\n## Interactive R\n\n### Mergesort from scratch\n\nI coded this while teaching myself computer science.\n\n\nI think it is important to understand how the \"so-called\" the basis functions work when it comes to the programming.\n\nYou can play around with it. Plus, you can modify the code for a better understanding.\n\n\n```{webr}\n### You can play ALL by YOURSELF!\n\n\nprint(\"Hello quarto-live world!\")\n\n\n\n{\n  # set seed for reproducability\n  set.seed(10)\n  givne_num <- sample(1:999, 20)\n}\n\n\n\n\n# merge two sorted array\nmerge <- function(a, b) {\n  \n  # create temp array\n  temp <- numeric(length(a) + length(b))\n  \n  \n  # array a, array b, setting the init value of temp array index i \n  a_i <- 1\n  b_i <- 1\n  temp_i <- 1\n  \n  \n  # loop through till the index temp_i reaches length of the temp array\n  for(temp_i in 1 : length(temp)) {\n    \n    # if\n    # the index of `a` does not exceedes the length of `a`(a present)\n    # a[a_i] < b[b_i]  or,\n    \n      \n    # the index of `b` does exceedes the length of `b`(i.e., b does not presnt)\n    if((a_i <= length(a) &&\n        a[a_i] < b[b_i]) ||\n       b_i > length(b)) {\n      \n      \n      # assign an element of `a[a_i]` into temp[a_i], then i++ the index of `a`\n      temp[temp_i] <- a[a_i]\n      a_i <- a_i + 1\n    }\n    \n    # else\n    else {\n      \n\n      # assign b[b_i] into temp[temp_i] then i++ the index\n      temp[temp_i] <- b[b_i]\n      b_i <- b_i + 1      \n    }\n    \n  }\n  \n  # return the sorted array (part of the divided/splitted)\n  return(temp)\n}\n\n\n\n\n# merge sort algorithm(splitting included) - recursive function\nmergesort <- function(arr) {\n  \n\n  # if length of the given array exceeds 1 then\n  if(length(arr) > 1) {\n    \n    # 분할할 중간 지점\n    # midpoint for the split\n    # e.g., an array size of 5: celing(5/2) = 3\n    half <- ceiling(length(arr)/2)\n    \n    \n    # calling recursive function: split untill the single element then sort\n    # 1 to midpoint\n    a <- mergesort(arr[1:half])\n    \n    \n    # midpoint+1 to last\n    b <- mergesort(arr[(half+1):length(arr)])\n    \n    # merge two sorted array and return\n    merge(a, b)\n  }\n  \n  # if the size of the array is 1\n  else {\n    # just return\n    return(arr)\n  }\n}\n\n\n\n\nminmax <- function(arr){\n  \n  temp <- mergesort(arr)\n  \n  # mimicing Python's dictionary... then return\n  return(list(\"max\" = temp[length(temp)], \"min\" = temp[1]))\n  \n}\n\n# function call\noutput <- minmax(givne_num)\n\n\n\n# max\noutput$max\n\n# min\noutput$min\n\n\n\n# Use the R built-in function to check the answer\nmax(givne_num)\nmin(givne_num)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n###\n```\n\n## Non-interactive\n\n```{r}\ncat(\"And, this is a non-interactive cell\", fill = TRUE)\n\n```\n\n\n\n","srcMarkdownNoYaml":"\n{{< include ../../_extensions/r-wasm/live/_knitr.qmd >}}\n\n\n# Quarto-Shinylive\n\n## Locations of Earthquakes off Fiji\n\n> The data set give the locations of 1000 seismic events of MB > 4.0. The events occurred in a cube near Fiji since 1964. There are two clear planes of seismic activity. One is a major plate junction; the other is the Tonga trench off New Zealand. These data constitute a subsample from a larger dataset of containing 5000 observations.\n\nThis is one of the Harvard PRIM-H project data sets. They in turn obtained it from Dr. John Woodhouse, Dept. of Geophysics, Harvard University.\n\n\n:::{.column-screen-inset}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 1000\n\n\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\nui <- bootstrapPage(\n  tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n  leafletOutput(\"map\", width = \"100%\", height = \"100%\"),\n  absolutePanel(top = 10, right = 10,\n    sliderInput(\"range\", \"Magnitudes\", min(quakes$mag), max(quakes$mag),\n      value = range(quakes$mag), step = 0.1\n    ),\n    selectInput(\"colors\", \"Color Scheme\",\n      rownames(subset(brewer.pal.info, category %in% c(\"seq\", \"div\")))\n    ),\n    checkboxInput(\"legend\", \"Show legend\", TRUE)\n  )\n)\n\nserver <- function(input, output, session) {\n\n  # Reactive expression for the data subsetted to what the user selected\n  filteredData <- reactive({\n    quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]\n  })\n\n  # This reactive expression represents the palette function,\n  # which changes as the user makes selections in UI.\n  colorpal <- reactive({\n    colorNumeric(input$colors, quakes$mag)\n  })\n\n  output$map <- renderLeaflet({\n    # Use leaflet() here, and only include aspects of the map that\n    # won't need to change dynamically (at least, not unless the\n    # entire map is being torn down and recreated).\n    leaflet(quakes) %>% addTiles() %>%\n      fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))\n  })\n\n  # Incremental changes to the map (in this case, replacing the\n  # circles when a new color is chosen) should be performed in\n  # an observer. Each independent set of things that can change\n  # should be managed in its own observer.\n  observe({\n    pal <- colorpal()\n\n    leafletProxy(\"map\", data = filteredData()) %>%\n      clearShapes() %>%\n      addCircles(radius = ~10^mag/10, weight = 1, color = \"#777777\",\n        fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag,\"진도\")\n      )\n  })\n\n  # Use a separate observer to recreate the legend as needed.\n  observe({\n    proxy <- leafletProxy(\"map\", data = quakes)\n\n    # Remove any existing legend, and only if the legend is\n    # enabled, create a new one.\n    proxy %>% clearControls()\n    if (input$legend) {\n      pal <- colorpal()\n      proxy %>% addLegend(position = \"bottomright\",\n        pal = pal, values = ~mag\n      )\n    }\n  })\n}\n\nshinyApp(ui, server)\n\n```\nCredit: [Using Leaflet with Shiny](https://rstudio.github.io/leaflet/articles/shiny.html#modifying-existing-maps-with-leafletproxy){target=\"_blank\"}\n\n:::\n\n# Quarto-Live\n\n\n## Interactive R\n\n### Mergesort from scratch\n\nI coded this while teaching myself computer science.\n\n\nI think it is important to understand how the \"so-called\" the basis functions work when it comes to the programming.\n\nYou can play around with it. Plus, you can modify the code for a better understanding.\n\n\n```{webr}\n### You can play ALL by YOURSELF!\n\n\nprint(\"Hello quarto-live world!\")\n\n\n\n{\n  # set seed for reproducability\n  set.seed(10)\n  givne_num <- sample(1:999, 20)\n}\n\n\n\n\n# merge two sorted array\nmerge <- function(a, b) {\n  \n  # create temp array\n  temp <- numeric(length(a) + length(b))\n  \n  \n  # array a, array b, setting the init value of temp array index i \n  a_i <- 1\n  b_i <- 1\n  temp_i <- 1\n  \n  \n  # loop through till the index temp_i reaches length of the temp array\n  for(temp_i in 1 : length(temp)) {\n    \n    # if\n    # the index of `a` does not exceedes the length of `a`(a present)\n    # a[a_i] < b[b_i]  or,\n    \n      \n    # the index of `b` does exceedes the length of `b`(i.e., b does not presnt)\n    if((a_i <= length(a) &&\n        a[a_i] < b[b_i]) ||\n       b_i > length(b)) {\n      \n      \n      # assign an element of `a[a_i]` into temp[a_i], then i++ the index of `a`\n      temp[temp_i] <- a[a_i]\n      a_i <- a_i + 1\n    }\n    \n    # else\n    else {\n      \n\n      # assign b[b_i] into temp[temp_i] then i++ the index\n      temp[temp_i] <- b[b_i]\n      b_i <- b_i + 1      \n    }\n    \n  }\n  \n  # return the sorted array (part of the divided/splitted)\n  return(temp)\n}\n\n\n\n\n# merge sort algorithm(splitting included) - recursive function\nmergesort <- function(arr) {\n  \n\n  # if length of the given array exceeds 1 then\n  if(length(arr) > 1) {\n    \n    # 분할할 중간 지점\n    # midpoint for the split\n    # e.g., an array size of 5: celing(5/2) = 3\n    half <- ceiling(length(arr)/2)\n    \n    \n    # calling recursive function: split untill the single element then sort\n    # 1 to midpoint\n    a <- mergesort(arr[1:half])\n    \n    \n    # midpoint+1 to last\n    b <- mergesort(arr[(half+1):length(arr)])\n    \n    # merge two sorted array and return\n    merge(a, b)\n  }\n  \n  # if the size of the array is 1\n  else {\n    # just return\n    return(arr)\n  }\n}\n\n\n\n\nminmax <- function(arr){\n  \n  temp <- mergesort(arr)\n  \n  # mimicing Python's dictionary... then return\n  return(list(\"max\" = temp[length(temp)], \"min\" = temp[1]))\n  \n}\n\n# function call\noutput <- minmax(givne_num)\n\n\n\n# max\noutput$max\n\n# min\noutput$min\n\n\n\n# Use the R built-in function to check the answer\nmax(givne_num)\nmin(givne_num)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n###\n```\n\n## Non-interactive\n\n```{r}\ncat(\"And, this is a non-interactive cell\", fill = TRUE)\n\n```\n\n\n\n"},"formats":{"live-html":{"identifier":{"display-name":"HTML","target-format":"live-html","base-format":"html","extension-name":"live"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["/home/runner/work/blog/blog/_extensions/r-wasm/live/live.lua","../../misc/quarto-version.lua","shinylive"],"include-in-header":["../../misc/giscus-mode-toggle.html"],"include-after-body":["../../misc/div-giscus.html"],"toc":false,"number-sections":true,"css":["../../misc/styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","ojs-engine":true,"revealjs-plugins":[],"title-block-banner":true,"title":"Quarto-shinylive & Quartolive Testdrive","author":"Yonghun Suh","date":"Oct 17, 2024","categories":["Code"],"image":"https://hypebright.nl/wp-content/uploads/2023/09/shinylive-blog-2-930x620.png","＃webr":null,"＃  show-startup-message":false,"number_sections":true,"code-copy":true,"toc_depth":3,"lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","../../misc/theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}